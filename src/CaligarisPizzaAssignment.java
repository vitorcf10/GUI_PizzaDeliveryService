
import java.text.DecimalFormat;

/*
 * V Caligaris
 * Apr 15, 2019
 * 
A pizza restaurant would like a computer program to calculate the price of customer orders.

	Size		Cost		Cost Per Topping
	Small		$ 5.00			$0.50
	Medium            8.00			 0.75
	Large		 10.00			 1.00
	Extra Large	 12.00		  	 1.25

The owner is offering a discount of â…“ off the total price of any Extra Large pizza. (i.e. an XL Pizza with no toppings would actually only cost $8.00) 
Write a program that will ask the user for all the appropriate information and print the final price of the order.
 */

/**
 *
 * @author vitor
 */
public class CaligarisPizzaAssignment extends javax.swing.JFrame {
    double sizePrice, toppingPrice;
    int toppingCount = 0;//Setting the topping count to 0.
    DecimalFormat mf = new DecimalFormat("$#,##0.00");//Decimal format for money.

    public CaligarisPizzaAssignment() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSize = new javax.swing.ButtonGroup();
        bgDrink = new javax.swing.ButtonGroup();
        bgDip = new javax.swing.ButtonGroup();
        bgDishes = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        cbHam = new javax.swing.JCheckBox();
        cbBacon = new javax.swing.JCheckBox();
        cbAnchovies = new javax.swing.JCheckBox();
        cbSpinach = new javax.swing.JCheckBox();
        cbGreenPeppers = new javax.swing.JCheckBox();
        cbBlackOlives = new javax.swing.JCheckBox();
        cbOnions = new javax.swing.JCheckBox();
        cbMushrooms = new javax.swing.JCheckBox();
        cbPineapple = new javax.swing.JCheckBox();
        cbExtraCheese = new javax.swing.JCheckBox();
        rbOrangeJuice = new javax.swing.JRadioButton();
        rbCoconutWater = new javax.swing.JRadioButton();
        rbCoke = new javax.swing.JRadioButton();
        rbChocolateMilkshake = new javax.swing.JRadioButton();
        lblSize = new javax.swing.JLabel();
        lblDipping = new javax.swing.JLabel();
        rbSmall = new javax.swing.JRadioButton();
        rbMedium = new javax.swing.JRadioButton();
        rbLarge = new javax.swing.JRadioButton();
        rbXLarge = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaFeedback = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lblToppings = new javax.swing.JLabel();
        cbPepperoni = new javax.swing.JCheckBox();
        lblDrink = new javax.swing.JLabel();
        lblDishes = new javax.swing.JLabel();
        rbChickenWings = new javax.swing.JRadioButton();
        rbMozzarellaBites = new javax.swing.JRadioButton();
        rbBreadG = new javax.swing.JRadioButton();
        rbCaesarSalad = new javax.swing.JRadioButton();
        btnExit = new javax.swing.JButton();
        btnReceipt = new javax.swing.JButton();
        rbGarlicSauce = new javax.swing.JRadioButton();
        rbRanch = new javax.swing.JRadioButton();
        rbBBQ = new javax.swing.JRadioButton();
        rbHot = new javax.swing.JRadioButton();
        rbNoDrink = new javax.swing.JRadioButton();
        rbNoDish = new javax.swing.JRadioButton();
        rbNoDip = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));
        setForeground(new java.awt.Color(204, 204, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));

        cbHam.setBackground(new java.awt.Color(255, 255, 153));
        cbHam.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbHam.setText("Ham");
        cbHam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHamActionPerformed(evt);
            }
        });

        cbBacon.setBackground(new java.awt.Color(255, 255, 153));
        cbBacon.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbBacon.setText("Bacon");
        cbBacon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBaconActionPerformed(evt);
            }
        });

        cbAnchovies.setBackground(new java.awt.Color(255, 255, 153));
        cbAnchovies.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbAnchovies.setText("Anchovies");
        cbAnchovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAnchoviesActionPerformed(evt);
            }
        });

        cbSpinach.setBackground(new java.awt.Color(255, 255, 153));
        cbSpinach.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbSpinach.setText("Spinach");
        cbSpinach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSpinachActionPerformed(evt);
            }
        });

        cbGreenPeppers.setBackground(new java.awt.Color(255, 255, 153));
        cbGreenPeppers.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbGreenPeppers.setText("Green Peppers");
        cbGreenPeppers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGreenPeppersActionPerformed(evt);
            }
        });

        cbBlackOlives.setBackground(new java.awt.Color(255, 255, 153));
        cbBlackOlives.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbBlackOlives.setText("Black Olives");
        cbBlackOlives.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBlackOlivesActionPerformed(evt);
            }
        });

        cbOnions.setBackground(new java.awt.Color(255, 255, 153));
        cbOnions.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbOnions.setText("Onions");
        cbOnions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOnionsActionPerformed(evt);
            }
        });

        cbMushrooms.setBackground(new java.awt.Color(255, 255, 153));
        cbMushrooms.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbMushrooms.setText("Mushrooms");
        cbMushrooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMushroomsActionPerformed(evt);
            }
        });

        cbPineapple.setBackground(new java.awt.Color(255, 255, 153));
        cbPineapple.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbPineapple.setText("Pineapple");
        cbPineapple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPineappleActionPerformed(evt);
            }
        });

        cbExtraCheese.setBackground(new java.awt.Color(255, 255, 153));
        cbExtraCheese.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbExtraCheese.setText("Extra Cheese");
        cbExtraCheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbExtraCheeseActionPerformed(evt);
            }
        });

        rbOrangeJuice.setBackground(new java.awt.Color(255, 255, 153));
        bgDrink.add(rbOrangeJuice);
        rbOrangeJuice.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbOrangeJuice.setText("Orange Juice");
        rbOrangeJuice.setToolTipText("");
        rbOrangeJuice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOrangeJuiceActionPerformed(evt);
            }
        });

        rbCoconutWater.setBackground(new java.awt.Color(255, 255, 153));
        bgDrink.add(rbCoconutWater);
        rbCoconutWater.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbCoconutWater.setText("Coconut Water");

        rbCoke.setBackground(new java.awt.Color(255, 255, 153));
        bgDrink.add(rbCoke);
        rbCoke.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbCoke.setText("Coke");

        rbChocolateMilkshake.setBackground(new java.awt.Color(255, 255, 153));
        bgDrink.add(rbChocolateMilkshake);
        rbChocolateMilkshake.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbChocolateMilkshake.setText("Chocolate Milkshake");

        lblSize.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblSize.setForeground(new java.awt.Color(102, 102, 255));
        lblSize.setText("Select the size of your pizza:");

        lblDipping.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblDipping.setForeground(new java.awt.Color(102, 102, 255));
        lblDipping.setText("Select a dipping sauce:");

        rbSmall.setBackground(new java.awt.Color(255, 255, 153));
        bgSize.add(rbSmall);
        rbSmall.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbSmall.setText("Small");
        rbSmall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSmallActionPerformed(evt);
            }
        });

        rbMedium.setBackground(new java.awt.Color(255, 255, 153));
        bgSize.add(rbMedium);
        rbMedium.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbMedium.setText("Medium");
        rbMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMediumActionPerformed(evt);
            }
        });

        rbLarge.setBackground(new java.awt.Color(255, 255, 153));
        bgSize.add(rbLarge);
        rbLarge.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbLarge.setText("Large");
        rbLarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLargeActionPerformed(evt);
            }
        });

        rbXLarge.setBackground(new java.awt.Color(255, 255, 153));
        bgSize.add(rbXLarge);
        rbXLarge.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbXLarge.setText("Extra Large");
        rbXLarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbXLargeActionPerformed(evt);
            }
        });

        txaFeedback.setEditable(false);
        txaFeedback.setBackground(new java.awt.Color(153, 153, 255));
        txaFeedback.setColumns(20);
        txaFeedback.setFont(new java.awt.Font("Monospaced", 3, 22)); // NOI18N
        txaFeedback.setForeground(new java.awt.Color(255, 255, 153));
        txaFeedback.setRows(5);
        jScrollPane2.setViewportView(txaFeedback);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/caligarispizzaassignment/IMAGES/galaxyPizzanewnew.png"))); // NOI18N

        lblToppings.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblToppings.setForeground(new java.awt.Color(102, 102, 255));
        lblToppings.setText("Select toppings:");

        cbPepperoni.setBackground(new java.awt.Color(255, 255, 153));
        cbPepperoni.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        cbPepperoni.setText("Pepperoni");
        cbPepperoni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPepperoniActionPerformed(evt);
            }
        });

        lblDrink.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblDrink.setForeground(new java.awt.Color(102, 102, 255));
        lblDrink.setText("Select a drink (500ml) :");

        lblDishes.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblDishes.setForeground(new java.awt.Color(102, 102, 255));
        lblDishes.setText("Select a side dish:");

        rbChickenWings.setBackground(new java.awt.Color(255, 255, 153));
        bgDishes.add(rbChickenWings);
        rbChickenWings.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbChickenWings.setText("Chicken Wings");

        rbMozzarellaBites.setBackground(new java.awt.Color(255, 255, 153));
        bgDishes.add(rbMozzarellaBites);
        rbMozzarellaBites.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbMozzarellaBites.setText("Mozzarella Bites");

        rbBreadG.setBackground(new java.awt.Color(255, 255, 153));
        bgDishes.add(rbBreadG);
        rbBreadG.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbBreadG.setText("Garlic Bread");

        rbCaesarSalad.setBackground(new java.awt.Color(255, 255, 153));
        bgDishes.add(rbCaesarSalad);
        rbCaesarSalad.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbCaesarSalad.setText("Ceasar Salad");
        rbCaesarSalad.setToolTipText("");

        btnExit.setBackground(new java.awt.Color(153, 255, 153));
        btnExit.setFont(new java.awt.Font("Times New Roman", 3, 22)); // NOI18N
        btnExit.setForeground(new java.awt.Color(204, 0, 51));
        btnExit.setText("Done!");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnReceipt.setBackground(new java.awt.Color(102, 102, 255));
        btnReceipt.setFont(new java.awt.Font("Times New Roman", 3, 28)); // NOI18N
        btnReceipt.setForeground(new java.awt.Color(255, 255, 51));
        btnReceipt.setText("Click Here for Receipt");
        btnReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceiptActionPerformed(evt);
            }
        });

        rbGarlicSauce.setBackground(new java.awt.Color(255, 255, 153));
        bgDip.add(rbGarlicSauce);
        rbGarlicSauce.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbGarlicSauce.setText("Garlic Sauce");
        rbGarlicSauce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGarlicSauceActionPerformed(evt);
            }
        });

        rbRanch.setBackground(new java.awt.Color(255, 255, 153));
        bgDip.add(rbRanch);
        rbRanch.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbRanch.setText("Ranch Sauce");
        rbRanch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRanchActionPerformed(evt);
            }
        });

        rbBBQ.setBackground(new java.awt.Color(255, 255, 153));
        bgDip.add(rbBBQ);
        rbBBQ.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbBBQ.setText("BBQ Sauce");

        rbHot.setBackground(new java.awt.Color(255, 255, 153));
        bgDip.add(rbHot);
        rbHot.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbHot.setText("Hot Sauce");
        rbHot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHotActionPerformed(evt);
            }
        });

        rbNoDrink.setBackground(new java.awt.Color(255, 255, 153));
        bgDrink.add(rbNoDrink);
        rbNoDrink.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbNoDrink.setText("No Drink");

        rbNoDish.setBackground(new java.awt.Color(255, 255, 153));
        bgDishes.add(rbNoDish);
        rbNoDish.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbNoDish.setText("No Side Dish");

        rbNoDip.setBackground(new java.awt.Color(255, 255, 153));
        bgDip.add(rbNoDip);
        rbNoDip.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        rbNoDip.setText("No Dipping");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbChocolateMilkshake)
                            .addComponent(rbCoke)
                            .addComponent(lblDrink)
                            .addComponent(rbOrangeJuice)
                            .addComponent(lblDishes))
                        .addGap(98, 360, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReceipt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbMozzarellaBites)
                                    .addComponent(rbBreadG)
                                    .addComponent(lblSize)
                                    .addComponent(rbSmall)
                                    .addComponent(rbMedium)
                                    .addComponent(rbLarge)
                                    .addComponent(rbXLarge)
                                    .addComponent(rbNoDrink)
                                    .addComponent(rbCoconutWater)
                                    .addComponent(rbChickenWings)
                                    .addComponent(rbCaesarSalad)
                                    .addComponent(rbNoDish))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblToppings)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cbBacon)
                                .addComponent(cbAnchovies)
                                .addComponent(cbHam)
                                .addComponent(cbPepperoni)
                                .addComponent(cbBlackOlives)
                                .addComponent(cbOnions)
                                .addComponent(cbSpinach)
                                .addComponent(cbGreenPeppers)
                                .addComponent(cbMushrooms)
                                .addComponent(cbPineapple)
                                .addComponent(cbExtraCheese)
                                .addComponent(lblDipping)
                                .addComponent(rbBBQ)
                                .addComponent(rbGarlicSauce)
                                .addComponent(rbHot)
                                .addComponent(rbRanch)
                                .addComponent(rbNoDip)
                                .addComponent(btnExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(54, 54, 54))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSize)
                    .addComponent(lblToppings))
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSmall)
                    .addComponent(cbBacon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMedium)
                    .addComponent(cbAnchovies))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbLarge)
                    .addComponent(cbHam))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbXLarge)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPepperoni)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblDrink, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbChocolateMilkshake)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbCoconutWater)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbCoke)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbOrangeJuice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbNoDrink))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbBlackOlives)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbOnions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSpinach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbGreenPeppers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMushrooms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPineapple)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbExtraCheese)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblDipping, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbBBQ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbGarlicSauce)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbHot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbRanch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbNoDip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDishes)
                        .addGap(2, 2, 2)
                        .addComponent(rbMozzarellaBites, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbBreadG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbChickenWings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbCaesarSalad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbNoDish)
                        .addGap(23, 23, 23)
                        .addComponent(btnReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbHotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbHotActionPerformed

    private void rbRanchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRanchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbRanchActionPerformed

    private void rbGarlicSauceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbGarlicSauceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbGarlicSauceActionPerformed

    private void btnReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceiptActionPerformed
        //Code runs whenever user presses the receipt button.
        System.out.println(sizePrice + toppingCount * toppingPrice);//Print to help the programmer detect if anything is wrong.
        double drinkPrice, dipPrice = 1.00, dishPrice, finalPrice, discount = 0, subtotal;
        String msg, drink, dip, sideDish;

        if(rbOrangeJuice.isSelected()){//If orange juice is selected give the value 4 for the drink price variable.
            drinkPrice = 4.00;
            drink = "Orange Juice - " + mf.format(drinkPrice);
        }else if(rbChocolateMilkshake.isSelected()){//If chocolate milkshake is selected give the value 6 for the drink price variable and a new message for the string drink.
            drinkPrice = 6.00;
            drink = "Chocolate Milkshake - " + mf.format(drinkPrice);
        }else if(rbCoconutWater.isSelected()){//If coconut water is selected give the value 4.75 for the drink price variable and a new message for the string drink.
            drinkPrice = 4.75;
            drink = "Coconut Water - " + mf.format(drinkPrice);
        }else if(rbCoke.isSelected()){//If coke is selected give the value 3 for the drink price variable and a new message for the string drink.
            drinkPrice = 3.00;
            drink = "Coke - " + mf.format(drinkPrice);
        }else{//else in case nothing is selected give the value 0 for the drink price variable and do not give a message for the string drink.
            drink = "";
            drinkPrice = 0.0;
        }
        if(rbBBQ.isSelected()){//If BBQ sauce is selected give a new message for the string dip.
            dip = "BBQ Sauce - " + mf.format(dipPrice);
        }else if(rbGarlicSauce.isSelected()){//If garlic sauce is selected give a new message for the string dip.
            dip = "Garlic Sauce - " + mf.format(dipPrice);
        }else if(rbHot.isSelected()){//If hot sauce is selected give a new message for the string dip.
            dip = "Hot Sauce - " +  mf.format(dipPrice);
        }else if(rbRanch.isSelected()){//If ranch sauce is selected give a new message for the string dip.
            dip = "Ranch Sauce - " + mf.format(dipPrice);
        }else{//if anything else is selected do not give a message for the string dip and set the price value to 0.
            dip = "";
            dipPrice =  0.0;
        }
        if(rbBreadG.isSelected()){//If garlic bread is selected give the value of 5 to the price and a new message for the side dish string.
            dishPrice = 5.00;
            sideDish = "Garlic Bread - " + mf.format(dishPrice);
        }else if(rbMozzarellaBites.isSelected()){//If mozzarella bites is selected give the value of 4.5 to the price and a new message for the side dish string.
            dishPrice = 4.50;
            sideDish = "Mozzarela Bites - " + mf.format(dishPrice);
        }else if(rbChickenWings.isSelected()){//If chicken wings is selected give the value of 6 to the price and a new message for the side dish string.
            dishPrice = 6.00;
            sideDish = "Chicken Wings - " +  mf.format(dishPrice);
        }else if(rbCaesarSalad.isSelected()){//If caesar salad is selected give the value of 5 to the price and a new message for the side dish string.
            dishPrice = 4.00;
            sideDish = "Caesar Salad - " + mf.format(dishPrice);
        }else{//if anything else is selected give the value of 0 to the price and a no message for the side dish string.
            sideDish = "";
            dishPrice = 0.0;
        }
        finalPrice = (sizePrice + toppingCount * toppingPrice) + dishPrice + dipPrice + drinkPrice;//Calculate the final price  by adding the final price to the price from toppings and then adding the price of side dish, dip, and drink.
        subtotal = finalPrice;//Save the first value for final price.
        if(rbXLarge.isSelected()){//If the size is extra large calculate and give 30% discount.
            discount = finalPrice/3;//Calculate discount by divinding final price by 3
            finalPrice = subtotal - discount;//Get the new final price by subtracting the discount from subtotal.
        }
        msg = ("Size Cost - " + mf.format(sizePrice) + "\nNumber of toppings - " + toppingCount + "\nTopping's Price - " + mf.format(toppingCount * toppingPrice) +
            "\nSubtotal - " + mf.format(subtotal) + "\nDiscount - " + mf.format(discount) + "\nTotal - " + mf.format(finalPrice));//Assign the message of the receipt to the string msg.
        txaFeedback.setText("Selected drink:\n" + drink +"\n"+ "Selected dipping sauce:\n" + dip+ "\n" + "Selected side dish:\n" + sideDish+ "\n" + msg);//Prompt the final receipt for the user on the JTextArea feedback.
        

    }//GEN-LAST:event_btnReceiptActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);//Exit from the JFrame when "Done!" is pressed.
    }//GEN-LAST:event_btnExitActionPerformed

    private void cbPepperoniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPepperoniActionPerformed
        if(cbPepperoni.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbPepperoniActionPerformed

    private void rbXLargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbXLargeActionPerformed
        if(rbXLarge.isSelected()){
            sizePrice = 12.00;
            toppingPrice = 1.25;
            System.out.println(sizePrice);//Print size price to help the programmer make sure it is correct.
            //If pressed assgn new value for price and price per topping.
        }
    }//GEN-LAST:event_rbXLargeActionPerformed

    private void rbLargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLargeActionPerformed
        if(rbLarge.isSelected()){
            sizePrice = 10.00;
            toppingPrice = 1.00;
            System.out.println(sizePrice);//Print size price to help the programmer make sure it is correct.
            //If pressed assgn new value for price and price per topping.
        }
    }//GEN-LAST:event_rbLargeActionPerformed

    private void rbMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMediumActionPerformed
        if(rbMedium.isSelected()){
            sizePrice = 8.00;
            toppingPrice = 0.75;
            System.out.println(sizePrice);//Print size price to help the programmer make sure it is correct.
            //If pressed assgn new value for price and price per topping.
        }
    }//GEN-LAST:event_rbMediumActionPerformed

    private void rbSmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSmallActionPerformed
        if(rbSmall.isSelected()){
            sizePrice = 5.00;
            toppingPrice = 0.50;
            System.out.println(sizePrice);//Print size price to help the programmer make sure it is correct.
            //If pressed assgn new value for price and price per topping.
        }
        
    }//GEN-LAST:event_rbSmallActionPerformed

    private void rbOrangeJuiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOrangeJuiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbOrangeJuiceActionPerformed

    private void cbExtraCheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbExtraCheeseActionPerformed
        if(cbExtraCheese.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbExtraCheeseActionPerformed

    private void cbPineappleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPineappleActionPerformed
        if(cbPineapple.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbPineappleActionPerformed

    private void cbMushroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMushroomsActionPerformed
        if(cbMushrooms.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbMushroomsActionPerformed

    private void cbOnionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOnionsActionPerformed
        if(cbOnions.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbOnionsActionPerformed

    private void cbBlackOlivesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBlackOlivesActionPerformed
        if(cbBlackOlives.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbBlackOlivesActionPerformed

    private void cbGreenPeppersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGreenPeppersActionPerformed
        if(cbGreenPeppers.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbGreenPeppersActionPerformed

    private void cbSpinachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSpinachActionPerformed
        if(cbSpinach.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbSpinachActionPerformed

    private void cbAnchoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAnchoviesActionPerformed
        if(cbAnchovies.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbAnchoviesActionPerformed

    private void cbBaconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBaconActionPerformed
        if(cbBacon.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbBaconActionPerformed

    private void cbHamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHamActionPerformed
        if(cbHam.isSelected()){//If checkbox is selected add one to counter. Else subtract one.
            toppingCount++;
        }else{
            toppingCount--;
        }
    }//GEN-LAST:event_cbHamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaligarisPizzaAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaligarisPizzaAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaligarisPizzaAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaligarisPizzaAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaligarisPizzaAssignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgDip;
    private javax.swing.ButtonGroup bgDishes;
    private javax.swing.ButtonGroup bgDrink;
    private javax.swing.ButtonGroup bgSize;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReceipt;
    private javax.swing.JCheckBox cbAnchovies;
    private javax.swing.JCheckBox cbBacon;
    private javax.swing.JCheckBox cbBlackOlives;
    private javax.swing.JCheckBox cbExtraCheese;
    private javax.swing.JCheckBox cbGreenPeppers;
    private javax.swing.JCheckBox cbHam;
    private javax.swing.JCheckBox cbMushrooms;
    private javax.swing.JCheckBox cbOnions;
    private javax.swing.JCheckBox cbPepperoni;
    private javax.swing.JCheckBox cbPineapple;
    private javax.swing.JCheckBox cbSpinach;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDipping;
    private javax.swing.JLabel lblDishes;
    private javax.swing.JLabel lblDrink;
    private javax.swing.JLabel lblSize;
    private javax.swing.JLabel lblToppings;
    private javax.swing.JRadioButton rbBBQ;
    private javax.swing.JRadioButton rbBreadG;
    private javax.swing.JRadioButton rbCaesarSalad;
    private javax.swing.JRadioButton rbChickenWings;
    private javax.swing.JRadioButton rbChocolateMilkshake;
    private javax.swing.JRadioButton rbCoconutWater;
    private javax.swing.JRadioButton rbCoke;
    private javax.swing.JRadioButton rbGarlicSauce;
    private javax.swing.JRadioButton rbHot;
    private javax.swing.JRadioButton rbLarge;
    private javax.swing.JRadioButton rbMedium;
    private javax.swing.JRadioButton rbMozzarellaBites;
    private javax.swing.JRadioButton rbNoDip;
    private javax.swing.JRadioButton rbNoDish;
    private javax.swing.JRadioButton rbNoDrink;
    private javax.swing.JRadioButton rbOrangeJuice;
    private javax.swing.JRadioButton rbRanch;
    private javax.swing.JRadioButton rbSmall;
    private javax.swing.JRadioButton rbXLarge;
    private javax.swing.JTextArea txaFeedback;
    // End of variables declaration//GEN-END:variables
}
